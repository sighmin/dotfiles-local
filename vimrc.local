"""""""""""""""""""""""
"       General       "
"""""""""""""""""""""""
" Enable default clipboard to system clipboard
set clipboard=unnamed
" Highlight matching braces
set showmatch
" Line highlighting
set cursorline
" Highlight current top result of search
set hlsearch
" Offset when scrolling a file larger than window
set scrolloff=3
" Enable copying of text using mouse
set mouse=a
" More advanced mouse support (drag etc)
if has('mouse_sgr')
  set ttymouse=sgr
endif
" (Hopefully) removes the delay when hitting esc in insert mode
set noesckeys
set notimeout
set ttimeout
set ttimeoutlen=1
" Hit <tab> to see all available commands
" Try :color <tab> to see what I mean
set wildmenu
" Wildignore files I don't want to ever open in vim
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/bower_components/*,test/reports/*
" Maintain undo history for each buffer between vim sessions
set undofile
set undodir=~/.vim/undodir
set fillchars=vert:│

" Shortcuts for tab navigation
nnoremap tn :tabnew<cr>
nnoremap tc :tabclose<cr>

" Save and exit shortcuts
nnoremap <leader>w :w<CR>
nnoremap <leader>wq :wq<CR>
nnoremap <leader>q :q<CR>

" Clear the search buffer when hitting return
nnoremap <cr> :nohlsearch<cr>

" Conventient mapping of :Q to :q for mistakes while trying to quit
command! Q q
command! Qall qall
command! W w
command! Wa wall
command! Wq wq

" Convenient mappings for vim commands
map <leader>nve :e ~/.config/nvim/init.lua<cr>
map <leader>ve :e ~/dotfiles-local/vimrc.local<cr>
map <leader>vbe :e ~/dotfiles-local/vimrc.bundles.local<cr>
map <leader>te :e ~/dotfiles-local/tmux.conf.local<cr>
map <leader>ze :e ~/dotfiles-local/zshrc.local<cr>
map <leader>ge :e ~/dotfiles-local/gitconfig.local<cr>
" Reload config files from vim
map <leader>sv :source ~/dotfiles-local/vimrc.local<cr>
map <leader>snv :source ~/.config/nvim/init.lua<cr>
map <leader>svb :source ~/dotfiles-local/vimrc.bundles.local<cr>
map <leader>st :source ~/dotfiles-local/tmux.conf.local<cr>
map <leader>sz :source ~/dotfiles-local/zshrc.local<cr>
map <leader>sg :source ~/dotfiles-local/gitconfig.local<cr>

"""""""""""""""""""""
"     Colorizer     "
"""""""""""""""""""""
let g:colorizer_auto_filetype='css,html,scss,slim,sass,less'

"""""""""""""""""""""""
"       Testing       "
"""""""""""""""""""""""
" vim-test strategy
let test#strategy = "tslime"
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
"let test#python#pytest#executable = "bin/t"
let test#ruby#rails#executable = 'bin/run cmd bin/rails test'
let g:test#javascript#mocha#file_pattern = '\vtest.(js|jsx|coffee)$'

"""""""""""""""""""""""
"       Airline       "
"""""""""""""""""""""""
" Configure airline
"let g:airline_powerline_fonts = 1
let g:airline_powerline_fonts = 2
let g:airline_theme = 'base16'

"""""""""""""""""""""""
" Color Configuration "
"""""""""""""""""""""""
set background=light
colorscheme PaperColor
set termguicolors

""""""""""""""""""""
"    LocalVimRc    "
""""""""""""""""""""
"let g:localvimrc_ask = 0
let g:localvimrc_whitelist = $HOME . '/Code/.*'
"autocmd User LocalVimRCPre  echom 'before loading local vimrc'
"autocmd User LocalVimRCPost echom 'after loading local vimrc'

"""""""""""""""""""""
"     NERDTree      "
"""""""""""""""""""""
" Toggle nerd tree
let NERDTreeShowHidden=1
map <leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"""""""""""""""""""""
"     Devicons      "
"""""""""""""""""""""
" https://github.com/ryanoasis/vim-devicons
"set guifont=DroidSansMono_Nerd_Font:h11

"""""""""""""""""""""
"      Tagbar       "
"""""""""""""""""""""
" Toggle tagbar
map <leader>b :TagbarToggle<cr>

"""""""""""""""""""""
"     EasyTags      "
"""""""""""""""""""""
" Set local tags file for increased speed
"set tags='./tags'
"let g:easytags_dynamic_files=2
" Do not automatically update highlights (slows things down)
"let g:easytags_auto_highlight=0
"let g:easytags_syntax_keyword = 'always'
"let g:easytags_auto_highlight = 0
"let g:easytags_auto_update = 0
let g:easytags_suppress_ctags_warning = 1

"""""""""""""""""""""""
"  TMUX + Vim cursor  "
"""""""""""""""""""""""
" Add change in cursor when in vim in tmux
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Consistent navigation between vim & tmux - this is absolutely awesome
" Source http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits
if exists('$TMUX')
  " If 'tmate' is in the $TMUX variable string, we're in tmate, not tmux
  if index(split($TMUX, '\W\+'), "tmux") == -1
    let multiplexer = 'tmate'
  else
    let multiplexer = 'tmux'
  endif

  function! MultiplexerOrSplitSwitch(wincmd, tmuxdir, multiplexer)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system(a:multiplexer . " select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system(multiplexer . " display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <c-h> :call MultiplexerOrSplitSwitch('h', 'L', multiplexer)<cr>
  nnoremap <silent> <c-j> :call MultiplexerOrSplitSwitch('j', 'D', multiplexer)<cr>
  nnoremap <silent> <c-k> :call MultiplexerOrSplitSwitch('k', 'U', multiplexer)<cr>
  nnoremap <silent> <c-l> :call MultiplexerOrSplitSwitch('l', 'R', multiplexer)<cr>
else
  " No tmux session, so navigate panes with <c-hjkl>
  map <c-h> <c-w>h
  map <c-j> <c-w>j
  map <c-k> <c-w>k
  map <c-l> <c-w>l
endif

"""""""""""""""""""""
"        Ale        "
"""""""""""""""""""""
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = '→'
let g:ale_sign_warning = '→'
let g:ale_fix_on_save = 0
let g:ale_lint_on_save = 1
let g:ale_completion_enabled = 1

let g:ale_fixers = {
\   'ruby':  [],
\   'elixir':  [],
\   'typescript': ['standard', 'prettier'],
\   'javascript': ['standard', 'prettier'],
\   'jsx': [],
\   'css': ['stylelint'],
\   'scss': [],
\   'go': ['gofmt'],
\ }

let g:ale_linters = {
\   'javascript': ['standard', 'prettier'],
\   'typescript': ['standard', 'prettier'],
\   'jsx': [],
\   'css': ['stylelint'],
\   'scss': [],
\   'elixir': [],
\   'ruby': [],
\   'html': [],
\   'markdown': [],
\   'go': ['gofmt'],
\}

function! AddLinterIfFileExists(lang, linter, file, lint, fix)
  let l:current = g:ale_linters[a:lang]

  if filereadable(a:file) && index(l:current, a:linter) == -1
    if a:lint
      let g:ale_linters[a:lang] = g:ale_linters[a:lang] + [a:linter]
    endif
    if a:fix
      let g:ale_fixers[a:lang] = g:ale_fixers[a:lang] + [a:linter]
    end
  endif
endfunction

call AddLinterIfFileExists('javascript', 'eslint', '.eslintrc.json', 1, 1)
call AddLinterIfFileExists('javascript', 'eslint', '.eslintrc', 1, 1)
call AddLinterIfFileExists('javascript', 'standard', '~/.asdf/shims/standard', 1, 1)
call AddLinterIfFileExists('typescript', 'eslint', '.eslintrc.json', 1, 1)
call AddLinterIfFileExists('typescript', 'eslint', '.eslintrc', 1, 1)
call AddLinterIfFileExists('typescript', 'standard', '~/.asdf/shims/standard', 1, 1)
call AddLinterIfFileExists('css', 'stylelint', '.stylelintrc.json', 1, 1)
call AddLinterIfFileExists('scss', 'stylelint', '.stylelintrc.json', 1, 1)
call AddLinterIfFileExists('scss', 'scss-lint', '.scss-lint.yml', 1, 1)
call AddLinterIfFileExists('ruby', 'rubocop', '.rubocop.yml', 1, 1)
call AddLinterIfFileExists('elixir', 'credo', 'config/.credo.exs', 1, 0)
call AddLinterIfFileExists('elixir', 'credo', '.credo.exs', 1, 0)

"""""""""""""""""""""
"      AutoCMD      "
"""""""""""""""""""""
augroup turbo
  autocmd!
  " Remove trailing whitespaces on save
  autocmd BufWritePre * :%s/\s\+$//e

  " Do not auto-enable spellcheck on markdown files
  autocmd FileType markdown setlocal nospell

  " Check for external file changes
  autocmd CursorHold,CursorMoved,BufEnter * checktime
augroup END

"""""""""""""""""""""
"  Goyo + Limelight "
"""""""""""""""""""""
function! s:start_write_mode()
  " Hide tmux status line when writing
  if exists('$TMUX')
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif
  " Paragraph focus with limelight
  " Limelight
endfunction

function! s:end_write_mode()
  " Show tmux status line when exiting
  if exists('$TMUX')
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  endif
  " Paragraph focus with limelight
  " !Limelight
endfunction

autocmd! User GoyoEnter nested call <SID>start_write_mode()
autocmd! User GoyoLeave nested call <SID>end_write_mode()

nmap <leader>w :Goyo<CR>

"""""""""""""""""""""
" Ctrl-p/fzf/ag/rg  "
"""""""""""""""""""""
" Convenient mappings for CtrlP and ctags
nmap <C-p> :Files<cr>
nmap <C-t> :Tags<cr>
nmap <C-i> :BTags<cr>

"""""""""""""""""""""
"     Livedown      "
"""""""""""""""""""""
nmap <leader>ld :LivedownToggle<cr>

"""""""""""""""""""""
"     EasyAlign     "
"""""""""""""""""""""
vmap <leader>= :EasyAlign*=<cr>
au FileType markdown vmap <leader><Bslash> :EasyAlign*<Bar><cr>

autocmd FileType javascript setlocal ts=2 sts=2 sw=2 et

"""""""""""""""""""""
" CoC Autocomplete  "
"""""""""""""""""""""
let g:coc_global_extensions = [ 'coc-tsserver' ]

" Show autocomplete when Tab is pressed
"inoremap <silent><expr> <Tab> coc#refresh()

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

"""""""""""""""""""""
" Stored macros
"""""""""""""""""""""

" Change snake case to lower camel case, example: start_date to startDate on a line
" Use by replaying the contents of buffer c with @c in normal mode
let @c = ':s#_\(\l\)#\u\1#g'

" Change snake case to upper camel case, example: start_date to StartDate on a line
" Use by replaying the contents of buffer v with @v in normal mode
let @v = ':s#\(\%(\<\l\+\)\%(_\)\@=\)\|_\(\l\)#\u\1\2#g'

"""""""""""""""""""""
" vim-markdown
"""""""""""""""""""""
let g:markdown_fenced_languages = [
\ 'bash=sh', 'sh',
\ 'javascript', 'js=javascript', 'json=javascript',
\ 'typescript', 'ts=typescript',
\ 'css', 'html',
\ 'ruby', 'python' ]
